// Constants
const VALID_ROOMS = {
    'NK': 'Nh√† kho',
    'PH': 'Ph√≤ng h·ªçp',
    'PGD': 'Ph√≤ng gi√°m ƒë·ªëc',
    'PTC': 'Ph√≤ng t√†i ch√≠nh',
    'PNS': 'Ph√≤ng nh√¢n s·ª±',
    'PTV': 'Ph√≤ng t√†i v·ª•',
    'VP': 'VƒÉn ph√≤ng',
    'PGS': 'Ph√≤ng gi√°m s√°t'
};

const ROOM_ICONS = {
    'NK': 'üè™',
    'PH': 'üè¢',
    'PGD': 'üëî',
    'PTC': 'üí∞',
    'PNS': 'üë•',
    'PTV': 'üìä',
    'VP': 'üè¢',
    'PGS': 'üëÄ'
};

// Initialize app
document.addEventListener('DOMContentLoaded', () => {
    initializeApp();
    setupEventListeners();
    updateUserInfo();
    setupRoomGrid();
    loadHelpContent();
    loadAboutContent();
});

// Initialize app state
function initializeApp() {
    if (!localStorage.getItem('currentSessionId')) {
        localStorage.setItem('currentSessionId', Date.now().toString());
    }
}

// Setup event listeners
function setupEventListeners() {
    // Navigation
    document.querySelectorAll('.nav-link').forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            const screenId = e.target.getAttribute('href').substring(1);
            showScreen(screenId);
        });
    });
}

// Show selected screen
function showScreen(screenId) {
    // Hide all screens
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    
    // Show selected screen
    const selectedScreen = document.getElementById(screenId);
    selectedScreen.classList.add('active');
    
    // Update navigation
    document.querySelectorAll('.nav-link').forEach(link => {
        link.classList.remove('active');
        if (link.getAttribute('href') === `#${screenId}`) {
            link.classList.add('active');
        }
    });
    
    // Special handling for screens
    if (screenId === 'history') {
        updateHistory();
    }
}

// Update user info
function updateUserInfo() {
    const userInfo = document.getElementById('user-info');
    userInfo.innerHTML = `
        <p><strong>Ng∆∞·ªùi d√πng:</strong> ${navigator.userAgent}</p>
        <p><strong>H·ªá ƒëi·ªÅu h√†nh:</strong> ${navigator.platform}</p>
        <p><strong>Session ID:</strong> ${localStorage.getItem('currentSessionId')}</p>
    `;
}

// Setup room grid
function setupRoomGrid() {
    const roomGrid = document.getElementById('roomGrid');
    roomGrid.innerHTML = '';
    
    Object.entries(VALID_ROOMS).forEach(([code, name]) => {
        const button = document.createElement('button');
        button.className = `room-button room-${code.toLowerCase()}`;
        button.innerHTML = `${ROOM_ICONS[code]}<br>${code}`;
        button.onclick = () => processRoom(code);
        roomGrid.appendChild(button);
    });
}

// Process room selection
function processRoom(roomCode) {
    const resultLayout = document.getElementById('resultLayout');
    resultLayout.innerHTML = '<div class="text-center"><div class="spinner-border" role="status"></div></div>';
    
    // Calculate probabilities
    const probabilities = calculateProbabilities(roomCode);
    showResults(roomCode, probabilities);
}

// Show results
function showResults(roomCode, probabilities) {
    const resultLayout = document.getElementById('resultLayout');
    const sortedProbs = Object.entries(probabilities)
        .sort(([,a], [,b]) => b - a)
        .slice(0, 3);
    
    let html = `
        <div class="result-card fade-in">
            <h3>${ROOM_ICONS[roomCode]} ${roomCode} - ${VALID_ROOMS[roomCode]}</h3>
    `;
    
    sortedProbs.forEach(([room, prob], index) => {
        const rating = getRating(prob);
        html += `
            <div class="mt-3">
                <h4>${index + 1}. ${ROOM_ICONS[room]} ${room}: ${prob.toFixed(1)}%</h4>
                <div class="progress">
                    <div class="progress-bar" role="progressbar" style="width: ${prob}%" 
                         aria-valuenow="${prob}" aria-valuemin="0" aria-valuemax="100"></div>
                </div>
                <p class="text-end">${rating}</p>
            </div>
        `;
    });
    
    html += '</div>';
    resultLayout.innerHTML = html;
}

// Get rating based on probability
function getRating(prob) {
    if (prob >= 70) return '<span class="text-success">‚≠ê‚≠ê‚≠ê R·∫•t t·ªët</span>';
    if (prob >= 50) return '<span class="text-warning">‚≠ê‚≠ê Kh√° t·ªët</span>';
    if (prob >= 30) return '<span class="text-info">‚≠ê Trung b√¨nh</span>';
    return '<span class="text-danger">‚ùå Kh√¥ng khuy·∫øn ngh·ªã</span>';
}

// Load help content
function loadHelpContent() {
    const helpContent = document.getElementById('helpContent');
    helpContent.innerHTML = `
        <h3>üéØ C√°ch s·ª≠ d·ª•ng:</h3>
        <ol>
            <li>Ch·ªçn "Nh·∫≠p ph√≤ng" t·ª´ menu ch√≠nh</li>
            <li>Nh·∫≠p m√£ ph√≤ng (VD: NK, PH, PGD...)</li>
            <li>Xem k·∫øt qu·∫£ ph√¢n t√≠ch</li>
            <li>Ch·ªçn m√£ ph√≤ng ti·∫øp theo ho·∫∑c quay l·∫°i menu</li>
        </ol>
        
        <h3>üè¢ C√°c ph√≤ng h·ª£p l·ªá:</h3>
        <ul>
            ${Object.entries(VALID_ROOMS).map(([code, name]) => 
                `<li><span class="room-${code.toLowerCase()}">${ROOM_ICONS[code]} ${code} - ${name}</span></li>`
            ).join('')}
        </ul>
        
        <h3>ü§ñ M√¥ h√¨nh AI:</h3>
        <ul>
            <li>M·ªói l·∫ßn kh·ªüi ƒë·ªông ·ª©ng d·ª•ng t·∫°o m·ªôt session m·ªõi</li>
            <li>AI ph√¢n t√≠ch m·∫´u l·∫∑p l·∫°i trong c√°c session</li>
            <li>Nh·∫≠n di·ªán m·∫´u 2-3 ph√≤ng li√™n ti·∫øp</li>
            <li>C√°c m·∫´u th∆∞·ªùng xuy√™n xu·∫•t hi·ªán c√≥ tr·ªçng s·ªë cao</li>
        </ul>
    `;
}

// Load about content
function loadAboutContent() {
    const aboutContent = document.getElementById('aboutContent');
    aboutContent.innerHTML = `
        <h3>VTH Tool</h3>
        <p><strong>Ph√°t tri·ªÉn b·ªüi:</strong> Hiep - BETA TOOL</p>
        <p><strong>Phi√™n b·∫£n:</strong> 0.1 (Mi·ªÖn ph√≠)</p>
        
        <div class="alert alert-danger">
            <strong>C√îNG C·ª§ HO√ÄN TO√ÄN MI·ªÑN PH√ç - C·∫§M MUA B√ÅN</strong>
        </div>
        
        <h3>Th√¥ng tin li√™n h·ªá:</h3>
        <ul>
            <li><a href="https://betatool.netlify.app/" target="_blank">Website: BETA TOOL</a></li>
            <li><a href="https://t.me/addlist/kneR3MNq7Kc5ZjY1" target="_blank">Telegram: Nh√≥m BETA TOOL</a></li>
            <li><a href="https://www.youtube.com/@beta_tool" target="_blank">YouTube: BETA TOOL</a></li>
        </ul>
        
        <h3>Gi·ªõi thi·ªáu:</h3>
        <p>VTH Tool l√† m·ªôt c√¥ng c·ª• ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi nh√≥m BETA TOOL nh·∫±m h·ªó tr·ª£ c·ªông ƒë·ªìng.
        Ch√∫ng t√¥i t·∫°o ra c√¥ng c·ª• n√†y v·ªõi m·ª•c ti√™u h·ªó tr·ª£ anh em tr√™n h√†nh tr√¨nh MMO.
        ·ª®ng d·ª•ng n√†y l√† HO√ÄN TO√ÄN MI·ªÑN PH√ç v√† nghi√™m c·∫•m vi·ªác mua b√°n d∆∞·ªõi m·ªçi h√¨nh th·ª©c.</p>
        
        <div class="alert alert-warning">
            N·∫øu b·∫°n ph·∫£i tr·∫£ ti·ªÅn ƒë·ªÉ c√≥ ƒë∆∞·ª£c ·ª©ng d·ª•ng n√†y, h√£y b√°o c√°o cho ch√∫ng t√¥i!
        </div>
    `;
}

// Update history
function updateHistory() {
    const historyLayout = document.getElementById('historyLayout');
    const history = getHistory();
    
    if (!history.length) {
        historyLayout.innerHTML = '<p class="text-center">B·∫°n ch∆∞a c√≥ l·ªãch s·ª≠ nh·∫≠p n√†o!</p>';
        return;
    }
    
    let html = `
        <h3>L·ªãch s·ª≠ nh·∫≠p (${history.length} b·∫£n ghi g·∫ßn nh·∫•t)</h3>
        <div class="list-group">
    `;
    
    history.forEach((entry, index) => {
        const date = new Date(entry.timestamp);
        const sessionStatus = entry.status === 'completed' ? 
            '<span class="badge bg-success">Ho√†n th√†nh</span>' : 
            '<span class="badge bg-primary">ƒêang ti·∫øp t·ª•c</span>';
            
        html += `
            <div class="list-group-item history-item">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <strong>${index + 1}. ${ROOM_ICONS[entry.room]} ${entry.room} - ${VALID_ROOMS[entry.room]}</strong>
                        <br>
                        <small>${date.toLocaleString()}</small>
                    </div>
                    <div class="text-end">
                        <small class="text-muted">Session: ${entry.sessionId.slice(-4)}</small>
                        <br>
                        ${sessionStatus}
                    </div>
                </div>
            </div>
        `;
    });
    
    html += '</div>';
    historyLayout.innerHTML = html;
}

// End current session
function endSession() {
    if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën k·∫øt th√∫c session hi·ªán t·∫°i?')) {
        // L∆∞u session hi·ªán t·∫°i v√†o l·ªãch s·ª≠
        const currentSessionId = localStorage.getItem('currentSessionId');
        const data = loadData();
        const username = 'default';
        
        if (data.sequences[username]) {
            const currentSession = data.sequences[username].find(s => s.session_id === currentSessionId);
            if (currentSession && currentSession.entries.length > 0) {
                // Th√™m th√¥ng tin k·∫øt th√∫c session
                currentSession.end_time = Date.now();
                currentSession.status = 'completed';
                saveData(data);
            }
        }
        
        // T·∫°o session m·ªõi
        localStorage.setItem('currentSessionId', Date.now().toString());
        
        // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
        updateUserInfo();
        
        // Hi·ªÉn th·ªã th√¥ng b√°o
        alert('Session ƒë√£ ƒë∆∞·ª£c k·∫øt th√∫c. Session m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o.');
        
        // C·∫≠p nh·∫≠t l·ªãch s·ª≠ n·∫øu ƒëang ·ªü m√†n h√¨nh l·ªãch s·ª≠
        if (document.getElementById('history').classList.contains('active')) {
            updateHistory();
        }
    }
} 